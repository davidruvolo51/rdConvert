% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert.R
\name{convert}
\alias{convert}
\title{Rd to Md Workflow}
\value{
Convert Rd files to Markdown files
}
\description{
As R6 class for converting Rd files to markdown with YAML headers. This may
be useful if you wish to use package documentation in static site generators
outside of the R ecosystem (e.g., React, Vue, Svelte, Gatsby, etc.). By
default, Rd files are rendered into their own directory with an independent
\code{index.md} file. The Rd name is parsed and set as the child directory name.

For example, if you have the file \code{man/my_cool_function.Rd}, the output
path and file will be: \code{my_cool_function/index.md}

The entry point will always be \code{man}.
}
\examples{
\dontrun{
myPkg <- convert$new(destDir = "./gatsby/src/pages/")
myPkg$set_entries()
myPkg$convert_rds()
myPkg$add_yaml()
}

}
\keyword{convert}
\keyword{markdown}
\keyword{rd}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{entry}}{path to Rd files}

\item{\code{destDir}}{output directory}

\item{\code{files}}{list of entry files and output paths}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{convert$new()}}
\item \href{#method-create_paths}{\code{convert$create_paths()}}
\item \href{#method-set_entries}{\code{convert$set_entries()}}
\item \href{#method-convert_rds}{\code{convert$convert_rds()}}
\item \href{#method-add_yaml}{\code{convert$add_yaml()}}
\item \href{#method-format_path}{\code{convert$format_path()}}
\item \href{#method-format_rd_name}{\code{convert$format_rd_name()}}
\item \href{#method-format_yaml_keywords}{\code{convert$format_yaml_keywords()}}
\item \href{#method-format_yaml_text}{\code{convert$format_yaml_text()}}
\item \href{#method-clone}{\code{convert$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new converter
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$new(destDir = "src/pages")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{destDir}}{output directory for markdown files}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_paths"></a>}}
\if{latex}{\out{\hypertarget{method-create_paths}{}}}
\subsection{Method \code{create_paths()}}{
Check file paths and create new dirs if applicable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$create_paths(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{a string containing a relative file path}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_entries"></a>}}
\if{latex}{\out{\hypertarget{method-set_entries}{}}}
\subsection{Method \code{set_entries()}}{
Set entry points and output file paths
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$set_entries()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-convert_rds"></a>}}
\if{latex}{\out{\hypertarget{method-convert_rds}{}}}
\subsection{Method \code{convert_rds()}}{
batch convert Rd files to markdown files with YAML
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$convert_rds()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_yaml"></a>}}
\if{latex}{\out{\hypertarget{method-add_yaml}{}}}
\subsection{Method \code{add_yaml()}}{
inject YAML from Rd files into rendered markdown files
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$add_yaml()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format_path"></a>}}
\if{latex}{\out{\hypertarget{method-format_path}{}}}
\subsection{Method \code{format_path()}}{
remove trailing forward slash
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$format_path(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{a string containing a file path}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format_rd_name"></a>}}
\if{latex}{\out{\hypertarget{method-format_rd_name}{}}}
\subsection{Method \code{format_rd_name()}}{
remove filename from .Rd files
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$format_rd_name(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{a file name}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format_yaml_keywords"></a>}}
\if{latex}{\out{\hypertarget{method-format_yaml_keywords}{}}}
\subsection{Method \code{format_yaml_keywords()}}{
Collapse Rd keywords array into JS array
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$format_yaml_keywords(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{an Rd keyword array}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format_yaml_text"></a>}}
\if{latex}{\out{\hypertarget{method-format_yaml_text}{}}}
\subsection{Method \code{format_yaml_text()}}{
Render and format Rd text to markdown
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$format_yaml_text(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{an Rd string}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{convert$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
